# .github/workflows/docker.yml

name: Build and Push Go Docker Image

# 触发条件：当代码推送到 main 分支，或者创建新的 tag 时
on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # 必须设置权限，才能写入到 Container Registry
    permissions:
      contents: read
      packages: write

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. 登录到 GitHub Container Registry
      # GITHUB_TOKEN 是 Actions 自动提供的，无需手动创建
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. 提取元数据（自动生成标签）
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          # 镜像名会自动变成 ghcr.io/owner/repo_name
          images: ghcr.io/${{ github.repository }}
          # 标签策略：
          # - 推送到 main 分支时，打上 main 标签
          # - 创建 tag v1.2.3 时，打上 1.2.3 和 latest 标签
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # 5. 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 在根目录
          push: true # 推送到仓库
          tags: ${{ steps.meta.outputs.tags }} # 使用上一步生成的标签
          labels: ${{ steps.meta.outputs.labels }}
          # 启用构建缓存，下次构建会更快
          cache-from: type=gha
          cache-to: type=gha,mode=max
